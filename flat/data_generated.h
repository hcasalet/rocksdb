// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATA_H_
#define FLATBUFFERS_GENERATED_DATA_H_

#include "flatbuffers/flatbuffers.h"

struct FbRow;

struct FbRow FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUMERICCOLS = 4,
    VT_STRINGCOLS = 6
  };
  const flatbuffers::Vector<uint64_t> *numericCols() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_NUMERICCOLS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *stringCols() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_STRINGCOLS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NUMERICCOLS) &&
           verifier.VerifyVector(numericCols()) &&
           VerifyOffset(verifier, VT_STRINGCOLS) &&
           verifier.VerifyVector(stringCols()) &&
           verifier.VerifyVectorOfStrings(stringCols()) &&
           verifier.EndTable();
  }
};

struct FbRowBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_numericCols(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> numericCols) {
    fbb_.AddOffset(FbRow::VT_NUMERICCOLS, numericCols);
  }
  void add_stringCols(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> stringCols) {
    fbb_.AddOffset(FbRow::VT_STRINGCOLS, stringCols);
  }
  explicit FbRowBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FbRowBuilder &operator=(const FbRowBuilder &);
  flatbuffers::Offset<FbRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FbRow>(end);
    return o;
  }
};

inline flatbuffers::Offset<FbRow> CreateFbRow(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> numericCols = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> stringCols = 0) {
  FbRowBuilder builder_(_fbb);
  builder_.add_stringCols(stringCols);
  builder_.add_numericCols(numericCols);
  return builder_.Finish();
}

inline flatbuffers::Offset<FbRow> CreateFbRowDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *numericCols = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *stringCols = nullptr) {
  auto numericCols__ = numericCols ? _fbb.CreateVector<uint64_t>(*numericCols) : 0;
  auto stringCols__ = stringCols ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*stringCols) : 0;
  return CreateFbRow(
      _fbb,
      numericCols__,
      stringCols__);
}

inline const FbRow *GetFbRow(const void *buf) {
  return flatbuffers::GetRoot<FbRow>(buf);
}

inline const FbRow *GetSizePrefixedFbRow(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<FbRow>(buf);
}

inline bool VerifyFbRowBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FbRow>(nullptr);
}

inline bool VerifySizePrefixedFbRowBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FbRow>(nullptr);
}

inline void FinishFbRowBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FbRow> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFbRowBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FbRow> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_DATA_H_
